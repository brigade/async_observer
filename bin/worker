#!/usr/bin/env ruby
# async-observer - Rails plugin for asynchronous job execution

# Copyright (C) 2007 Philotic Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'

@options = {
  :pidpath => 'log/worker.pid'
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on('-s', '--check-symlink SYMLINK',
          'Check rails root against this symlink for restarts') do |s|
    @options[:check_symlink] = s
  end

  opts.on('-e', '--environment ENVIRONMENT', 'Set the rails environment') do |e|
    ENV['RAILS_ENV'] = e
  end

  opts.on('-d', '--daemon', 'Daemonize') do |d|
    @options[:daemon] = true
  end

  opts.on('-p', '--pid PIDFILE', 'Specify PID file path') do |p|
    @options[:pidpath] = p
  end
end.parse(ARGV)

# Use the same pointer (and therefore same buffer) for stdout and stderr.
$VERBOSE=false
STDERR.reopen(STDOUT)
STDOUT.sync = true

# Ruby 1.9 doesn't include '.' in $LOAD_PATH by default
$LOAD_PATH << '.'

require 'time'

def load_rails_and_run
  # Rails initialization.
  # This executable only works from the root directory of a Rails application.
  begin
    puts "#!load-rails!begin!#{Time.now.utc.xmlschema(6)}"
    require File.expand_path('./config/environment')
    puts "RAILS_ROOT=#{Rails.root.inspect}"
  ensure
    puts "#!load-rails!end!#{Time.now.utc.xmlschema(6)}"
  end
  require 'async_observer/worker'
  AsyncObserver::Worker.new(binding, @options).run()
end

if @options[:daemon]
  pidpath = @options[:pidpath]
  unless File.writable?(File.dirname(pidpath))
    STDERR.puts "#{pidpath} not writable!"
    exit(1)
  end

  if File.exist?(pidpath)
    pid = File.new(pidpath).read.to_i

    if File.exists?("/proc/#{pid}") && Process.pid != pid
      STDERR.puts
      STDERR.puts "!! Error"
      STDERR.puts "!! #{pidpath} exists and points to running process with pid #{pid}."
      STDERR.puts "!! Remove the pidfile if appropriate."
      STDERR.puts
      exit(1)
    else
      STDERR.puts "Deleting stale pid file #{pidpath} containing pid #{pid}"
      File.delete(pidpath)
    end
  end

  require 'async_observer/daemonize'
  AsyncObserver::Daemonize.detach(pidpath) do
    load_rails_and_run
  end
else
  load_rails_and_run
end
